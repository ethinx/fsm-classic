---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-pipy-controller
  namespace: flomesh
  labels:
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/component: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: ingress-pipy
      app.kubernetes.io/component: controller
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: ingress-pipy
        app.kubernetes.io/component: controller
    spec:
#      securityContext:
#        runAsNonRoot: true
#        runAsUser: 101
      initContainers:
      - name: wait-repo
        image: flomesh/wait-for-it:1.0.0
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |+
          /wait-for-it.sh --strict --timeout=0 \
            --host=$(REPO_SERVICE_NAME).$(REPO_SERVICE_NAMESPACE).svc \
            --port=6060 \
            -- echo "REPO IS READY!"
      - name: wait-manager
        image: flomesh/wait-for-it:1.0.0
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |+
          /wait-for-it.sh --strict --timeout=0 \
            --host=$(MANAGER_WEBHOOK_SERVICE_NAME).$(MANAGER_WEBHOOK_SERVICE_NAMESPACE).svc \
            --port=443 \
            -- echo "MANAGER IS READY!"
      - name: wait-aggregator
        image: flomesh/wait-for-it:1.0.0
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |+
          /wait-for-it.sh --strict --timeout=0 \
            --host=$(AGGREGATOR_SERVICE_NAME).$(AGGREGATOR_SERVICE_NAMESPACE).svc \
            --port=6767 \
            -- echo "AGGREGATOR IS READY!"
      containers:
      - name: ingress
        image: ingress-pipy:latest
        imagePullPolicy: Always
        args:
        - --v=2
        ports:
        - name: ingress
          containerPort: 8000
        - name: health
          containerPort: 8081
        securityContext:
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
#          runAsUser: 101
#          allowPrivilegeEscalation: true
        livenessProbe:
          tcpSocket:
            port: 8000
          periodSeconds: 20
        readinessProbe:
          tcpSocket:
            port: 8000
          periodSeconds: 20
        startupProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 15
          failureThreshold: 10
      serviceAccountName: fsm
      terminationGracePeriodSeconds: 60
